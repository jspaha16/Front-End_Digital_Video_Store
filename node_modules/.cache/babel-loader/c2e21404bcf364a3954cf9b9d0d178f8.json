{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    fetch(url, {\n      signal: abortCont.signal\n    }).then(res => {\n      if (!res.ok) {\n        // error coming back from server\n        throw Error(\"could not fetch the data for that resource\");\n      }\n\n      return res.json();\n    }).then(data => {\n      setIsPending(false);\n      setData(data.body);\n      setError(null);\n    }).catch(err => {\n      if (err.name === \"AbortError\") {\n        console.log(\"fetch aborted\");\n      } else {\n        // auto catches network / connection error\n        setIsPending(false);\n        setError(err.message);\n      }\n    }); // abort the fetch\n\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","fetch","signal","then","res","ok","Error","json","body","catch","err","name","console","log","message","abort"],"sources":["C:/Users/DELL/Desktop/cjv-movie/src/components/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setData] = useState(null);\r\n  const [isPending, setIsPending] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const abortCont = new AbortController();\r\n\r\n    fetch(url, { signal: abortCont.signal })\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          // error coming back from server\r\n          throw Error(\"could not fetch the data for that resource\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setIsPending(false);\r\n        setData(data.body);\r\n        setError(null);\r\n      })\r\n      .catch((err) => {\r\n        if (err.name === \"AbortError\") {\r\n          console.log(\"fetch aborted\");\r\n        } else {\r\n          // auto catches network / connection error\r\n          setIsPending(false);\r\n          setError(err.message);\r\n        }\r\n      });\r\n\r\n    // abort the fetch\r\n    return () => abortCont.abort();\r\n  }, [url]);\r\n\r\n  return { data, isPending, error };\r\n};\r\n\r\nexport default useFetch;\r\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;EAAA;;EACxB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,IAAIC,eAAJ,EAAlB;IAEAC,KAAK,CAACT,GAAD,EAAM;MAAEU,MAAM,EAAEH,SAAS,CAACG;IAApB,CAAN,CAAL,CACGC,IADH,CACSC,GAAD,IAAS;MACb,IAAI,CAACA,GAAG,CAACC,EAAT,EAAa;QACX;QACA,MAAMC,KAAK,CAAC,4CAAD,CAAX;MACD;;MACD,OAAOF,GAAG,CAACG,IAAJ,EAAP;IACD,CAPH,EAQGJ,IARH,CAQSV,IAAD,IAAU;MACdG,YAAY,CAAC,KAAD,CAAZ;MACAF,OAAO,CAACD,IAAI,CAACe,IAAN,CAAP;MACAV,QAAQ,CAAC,IAAD,CAAR;IACD,CAZH,EAaGW,KAbH,CAaUC,GAAD,IAAS;MACd,IAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;QAC7BC,OAAO,CAACC,GAAR,CAAY,eAAZ;MACD,CAFD,MAEO;QACL;QACAjB,YAAY,CAAC,KAAD,CAAZ;QACAE,QAAQ,CAACY,GAAG,CAACI,OAAL,CAAR;MACD;IACF,CArBH,EAHc,CA0Bd;;IACA,OAAO,MAAMf,SAAS,CAACgB,KAAV,EAAb;EACD,CA5BQ,EA4BN,CAACvB,GAAD,CA5BM,CAAT;EA8BA,OAAO;IAAEC,IAAF;IAAQE,SAAR;IAAmBE;EAAnB,CAAP;AACD,CApCD;;GAAMN,Q;;AAsCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}