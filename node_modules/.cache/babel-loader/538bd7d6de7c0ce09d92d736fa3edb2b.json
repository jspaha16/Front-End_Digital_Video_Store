{"ast":null,"code":"'use strict';\n\nvar SearchParameters = require('./SearchParameters');\n\nvar SearchResults = require('./SearchResults');\n\nvar DerivedHelper = require('./DerivedHelper');\n\nvar requestBuilder = require('./requestBuilder');\n\nvar EventEmitter = require('@algolia/events');\n\nvar inherits = require('./functions/inherits');\n\nvar objectHasKeys = require('./functions/objectHasKeys');\n\nvar omit = require('./functions/omit');\n\nvar merge = require('./functions/merge');\n\nvar version = require('./version');\n\nvar escapeFacetValue = require('./functions/escapeFacetValue').escapeFacetValue;\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {object} event\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\n * @example\n * helper.on('change', function(event) {\n *   console.log('The parameters have changed');\n * });\n */\n\n/**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\n * @example\n * helper.on('search', function(event) {\n *   console.log('Search sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @property {string} event.facet the facet searched into\n * @property {string} event.query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(event) {\n *   console.log('searchForFacetValues sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @example\n * helper.on('searchOnce', function(event) {\n *   console.log('searchOnce sent');\n * });\n */\n\n/**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {object} event\n * @property {SearchResults} event.results the results received from Algolia\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(event) {\n *   console.log('Search results received');\n * });\n */\n\n/**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {object} event\n * @property {Error} event.error the error returned by the Algolia.\n * @example\n * helper.on('error', function(event) {\n *   console.log('Houston we got a problem.');\n * });\n */\n\n/**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */\n\n/**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n */\n\n\nfunction AlgoliaSearchHelper(client, index, options) {\n  if (typeof client.addAlgoliaAgent === 'function') {\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n\n  this.setClient(client);\n  var opts = options || {};\n  opts.index = index;\n  this.state = SearchParameters.make(opts);\n  this.lastResults = null;\n  this._queryId = 0;\n  this._lastQueryIdReceived = -1;\n  this.derivedHelpers = [];\n  this._currentNbQueries = 0;\n}\n\ninherits(AlgoliaSearchHelper, EventEmitter);\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper}\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */\n\nAlgoliaSearchHelper.prototype.search = function () {\n  this._search({\n    onlyWithDerivedHelpers: false\n  });\n\n  return this;\n};\n\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function () {\n  this._search({\n    onlyWithDerivedHelpers: true\n  });\n\n  return this;\n};\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */\n\n\nAlgoliaSearchHelper.prototype.getQuery = function () {\n  var state = this.state;\n  return requestBuilder._getHitsSearchParams(state);\n};\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [callback] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */\n\n\nAlgoliaSearchHelper.prototype.searchOnce = function (options, cb) {\n  var tempState = !options ? this.state : this.state.setQueryParameters(options);\n\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\n\n  var self = this;\n  this._currentNbQueries++;\n  this.emit('searchOnce', {\n    state: tempState\n  });\n\n  if (cb) {\n    this.client.search(queries).then(function (content) {\n      self._currentNbQueries--;\n\n      if (self._currentNbQueries === 0) {\n        self.emit('searchQueueEmpty');\n      }\n\n      cb(null, new SearchResults(tempState, content.results), tempState);\n    }).catch(function (err) {\n      self._currentNbQueries--;\n\n      if (self._currentNbQueries === 0) {\n        self.emit('searchQueueEmpty');\n      }\n\n      cb(err, null, tempState);\n    });\n    return undefined;\n  }\n\n  return this.client.search(queries).then(function (content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    return {\n      content: new SearchResults(tempState, content.results),\n      state: tempState,\n      _originalResponse: content\n    };\n  }, function (e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n/**\n* Start the search for answers with the parameters set in the state.\n* This method returns a promise.\n* @param {Object} options - the options for answers API call\n* @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\n* @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\n* @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\n*\n* @return {promise} the answer results\n*/\n\n\nAlgoliaSearchHelper.prototype.findAnswers = function (options) {\n  var state = this.state;\n  var derivedHelper = this.derivedHelpers[0];\n\n  if (!derivedHelper) {\n    return Promise.resolve([]);\n  }\n\n  var derivedState = derivedHelper.getModifiedState(state);\n  var data = merge({\n    attributesForPrediction: options.attributesForPrediction,\n    nbHits: options.nbHits\n  }, {\n    params: omit(requestBuilder._getHitsSearchParams(derivedState), ['attributesToSnippet', 'hitsPerPage', 'restrictSearchableAttributes', 'snippetEllipsisText' // FIXME remove this line once the engine is fixed.\n    ])\n  });\n  var errorMessage = 'search for answers was called, but this client does not have a function client.initIndex(index).findAnswers';\n\n  if (typeof this.client.initIndex !== 'function') {\n    throw new Error(errorMessage);\n  }\n\n  var index = this.client.initIndex(derivedState.index);\n\n  if (typeof index.findAnswers !== 'function') {\n    throw new Error(errorMessage);\n  }\n\n  return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */\n\n/**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */\n\n/**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\n\n\nAlgoliaSearchHelper.prototype.searchForFacetValues = function (facet, query, maxFacetHits, userState) {\n  var clientHasSFFV = typeof this.client.searchForFacetValues === 'function';\n  var clientHasInitIndex = typeof this.client.initIndex === 'function';\n\n  if (!clientHasSFFV && !clientHasInitIndex && typeof this.client.search !== 'function') {\n    throw new Error('search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues');\n  }\n\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);\n  this._currentNbQueries++;\n  var self = this;\n  var searchForFacetValuesPromise; // newer algoliasearch ^3.27.1 - ~4.0.0\n\n  if (clientHasSFFV) {\n    searchForFacetValuesPromise = this.client.searchForFacetValues([{\n      indexName: state.index,\n      params: algoliaQuery\n    }]); // algoliasearch < 3.27.1\n  } else if (clientHasInitIndex) {\n    searchForFacetValuesPromise = this.client.initIndex(state.index).searchForFacetValues(algoliaQuery); // algoliasearch ~5.0.0\n  } else {\n    // @MAJOR only use client.search\n    delete algoliaQuery.facetName;\n    searchForFacetValuesPromise = this.client.search([{\n      type: 'facet',\n      facet: facet,\n      indexName: state.index,\n      params: algoliaQuery\n    }]).then(function processResponse(response) {\n      return response.results[0];\n    });\n  }\n\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query\n  });\n  return searchForFacetValuesPromise.then(function addIsRefined(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    content = Array.isArray(content) ? content[0] : content;\n    content.facetHits.forEach(function (f) {\n      f.escapedValue = escapeFacetValue(f.value);\n      f.isRefined = isDisjunctive ? state.isDisjunctiveFacetRefined(facet, f.escapedValue) : state.isFacetRefined(facet, f.escapedValue);\n    });\n    return content;\n  }, function (e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.setQuery = function (q) {\n  this._change({\n    state: this.state.resetPage().setQuery(q),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */\n\n\nAlgoliaSearchHelper.prototype.clearRefinements = function (name) {\n  this._change({\n    state: this.state.resetPage().clearRefinements(name),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.clearTags = function () {\n  this._change({\n    state: this.state.resetPage().clearTags(),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */\n\n\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function () {\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */\n\n\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addHierarchicalFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.addNumericRefinement = function (attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().addNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.addFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */\n\n\nAlgoliaSearchHelper.prototype.addRefine = function () {\n  return this.addFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.addFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */\n\n\nAlgoliaSearchHelper.prototype.addExclude = function () {\n  return this.addFacetExclusion.apply(this, arguments);\n};\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.addTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().addTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function (attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().removeNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */\n\n\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function () {\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function (facet) {\n  this._change({\n    state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */\n\n\nAlgoliaSearchHelper.prototype.removeRefine = function () {\n  return this.removeFacetRefinement.apply(this, arguments);\n};\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */\n\n\nAlgoliaSearchHelper.prototype.removeExclude = function () {\n  return this.removeFacetExclusion.apply(this, arguments);\n};\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.removeTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().removeTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */\n\n\nAlgoliaSearchHelper.prototype.toggleExclude = function () {\n  return this.toggleFacetExclusion.apply(this, arguments);\n};\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\n\n\nAlgoliaSearchHelper.prototype.toggleRefinement = function (facet, value) {\n  return this.toggleFacetRefinement(facet, value);\n};\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\n\n\nAlgoliaSearchHelper.prototype.toggleRefine = function () {\n  return this.toggleFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.toggleTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().toggleTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */\n\n\nAlgoliaSearchHelper.prototype.nextPage = function () {\n  var page = this.state.page || 0;\n  return this.setPage(page + 1);\n};\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper}\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */\n\n\nAlgoliaSearchHelper.prototype.previousPage = function () {\n  var page = this.state.page || 0;\n  return this.setPage(page - 1);\n};\n/**\n * @private\n */\n\n\nfunction setCurrentPage(page) {\n  if (page < 0) throw new Error('Page requested below 0.');\n\n  this._change({\n    state: this.state.setPage(page),\n    isPageReset: false\n  });\n\n  return this;\n}\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\nAlgoliaSearchHelper.prototype.setIndex = function (name) {\n  this._change({\n    state: this.state.resetPage().setIndex(name),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */\n\n\nAlgoliaSearchHelper.prototype.setQueryParameter = function (parameter, value) {\n  this._change({\n    state: this.state.resetPage().setQueryParameter(parameter, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.setState = function (newState) {\n  this._change({\n    state: SearchParameters.make(newState),\n    isPageReset: false\n  });\n\n  return this;\n};\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function (newState) {\n  this.state = new SearchParameters(newState);\n  return this;\n};\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */\n\n\nAlgoliaSearchHelper.prototype.hasRefinements = function (attribute) {\n  if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n    return true;\n  } else if (this.state.isConjunctiveFacet(attribute)) {\n    return this.state.isFacetRefined(attribute);\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\n    return this.state.isDisjunctiveFacetRefined(attribute);\n  } else if (this.state.isHierarchicalFacet(attribute)) {\n    return this.state.isHierarchicalFacetRefined(attribute);\n  } // there's currently no way to know that the user did call `addNumericRefinement` at some point\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\n  // so we will return false in every other situations to be consistent\n  // while what we should do here is throw because we did not find the attribute in any type\n  // of refinement\n\n\n  return false;\n};\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */\n\n\nAlgoliaSearchHelper.prototype.isExcluded = function (facet, value) {\n  return this.state.isExcludeRefined(facet, value);\n};\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\n\n\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function (facet, value) {\n  return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean}\n */\n\n\nAlgoliaSearchHelper.prototype.hasTag = function (tag) {\n  return this.state.isTagRefined(tag);\n};\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */\n\n\nAlgoliaSearchHelper.prototype.isTagRefined = function () {\n  return this.hasTagRefinements.apply(this, arguments);\n};\n/**\n * Get the name of the currently used index.\n * @return {string}\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */\n\n\nAlgoliaSearchHelper.prototype.getIndex = function () {\n  return this.state.index;\n};\n\nfunction getCurrentPage() {\n  return this.state.page;\n}\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */\n\n\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */\n\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */\n\nAlgoliaSearchHelper.prototype.getTags = function () {\n  return this.state.tagRefinements;\n};\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */\n\n\nAlgoliaSearchHelper.prototype.getRefinements = function (facetName) {\n  var refinements = [];\n\n  if (this.state.isConjunctiveFacet(facetName)) {\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n    conjRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'conjunctive'\n      });\n    });\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\n    excludeRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'exclude'\n      });\n    });\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\n    var disjRefinements = this.state.getDisjunctiveRefinements(facetName);\n    disjRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'disjunctive'\n      });\n    });\n  }\n\n  var numericRefinements = this.state.getNumericRefinements(facetName);\n  Object.keys(numericRefinements).forEach(function (operator) {\n    var value = numericRefinements[operator];\n    refinements.push({\n      value: value,\n      operator: operator,\n      type: 'numeric'\n    });\n  });\n  return refinements;\n};\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */\n\n\nAlgoliaSearchHelper.prototype.getNumericRefinement = function (attribute, operator) {\n  return this.state.getNumericRefinement(attribute, operator);\n};\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */\n\n\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function (facetName) {\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\n}; // /////////// PRIVATE\n\n/**\n * Perform the underlying queries\n * @private\n * @return {undefined}\n * @fires search\n * @fires result\n * @fires error\n */\n\n\nAlgoliaSearchHelper.prototype._search = function (options) {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n\n  if (!options.onlyWithDerivedHelpers) {\n    mainQueries = requestBuilder._getQueries(state.index, state);\n    states.push({\n      state: state,\n      queriesCount: mainQueries.length,\n      helper: this\n    });\n    this.emit('search', {\n      state: state,\n      results: this.lastResults\n    });\n  }\n\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n\n    var derivedStateQueries = requestBuilder._getQueries(derivedState.index, derivedState);\n\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper\n    });\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults\n    });\n    return derivedStateQueries;\n  });\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n  var queryId = this._queryId++;\n  this._currentNbQueries++;\n\n  try {\n    this.client.search(queries).then(this._dispatchAlgoliaResponse.bind(this, states, queryId)).catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error\n    });\n  }\n};\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>}\n *  state state used for to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */\n\n\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function (states, queryId, content) {\n  // FIXME remove the number of outdated queries discarded instead of just one\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n  var results = content.results.slice();\n  states.forEach(function (s) {\n    var state = s.state;\n    var queriesCount = s.queriesCount;\n    var helper = s.helper;\n    var specificResults = results.splice(0, queriesCount);\n    var formattedResponse = helper.lastResults = new SearchResults(state, specificResults);\n    helper.emit('result', {\n      results: formattedResponse,\n      state: state\n    });\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function (queryId, error) {\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n  this.emit('error', {\n    error: error\n  });\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype.containsRefinement = function (query, facetFilters, numericFilters, tagFilters) {\n  return query || facetFilters.length !== 0 || numericFilters.length !== 0 || tagFilters.length !== 0;\n};\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean}\n */\n\n\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function (facet) {\n  return this.state.disjunctiveRefinements[facet] && this.state.disjunctiveRefinements[facet].length > 0;\n};\n\nAlgoliaSearchHelper.prototype._change = function (event) {\n  var state = event.state;\n  var isPageReset = event.isPageReset;\n\n  if (state !== this.state) {\n    this.state = state;\n    this.emit('change', {\n      state: this.state,\n      results: this.lastResults,\n      isPageReset: isPageReset\n    });\n  }\n};\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper}\n */\n\n\nAlgoliaSearchHelper.prototype.clearCache = function () {\n  this.client.clearCache && this.client.clearCache();\n  return this;\n};\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper}\n */\n\n\nAlgoliaSearchHelper.prototype.setClient = function (newClient) {\n  if (this.client === newClient) return this;\n\n  if (typeof newClient.addAlgoliaAgent === 'function') {\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n\n  this.client = newClient;\n  return this;\n};\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch}\n */\n\n\nAlgoliaSearchHelper.prototype.getClient = function () {\n  return this.client;\n};\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @return {DerivedHelper}\n */\n\n\nAlgoliaSearchHelper.prototype.derive = function (fn) {\n  var derivedHelper = new DerivedHelper(this, fn);\n  this.derivedHelpers.push(derivedHelper);\n  return derivedHelper;\n};\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @return {undefined}\n * @throws Error\n */\n\n\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function (derivedHelper) {\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\n  if (pos === -1) throw new Error('Derived helper already detached');\n  this.derivedHelpers.splice(pos, 1);\n};\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */\n\n\nAlgoliaSearchHelper.prototype.hasPendingRequests = function () {\n  return this._currentNbQueries > 0;\n};\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */\n\n/**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */\n\n\nmodule.exports = AlgoliaSearchHelper;","map":{"version":3,"names":["SearchParameters","require","SearchResults","DerivedHelper","requestBuilder","EventEmitter","inherits","objectHasKeys","omit","merge","version","escapeFacetValue","AlgoliaSearchHelper","client","index","options","addAlgoliaAgent","setClient","opts","state","make","lastResults","_queryId","_lastQueryIdReceived","derivedHelpers","_currentNbQueries","prototype","search","_search","onlyWithDerivedHelpers","searchOnlyWithDerivedHelpers","getQuery","_getHitsSearchParams","searchOnce","cb","tempState","setQueryParameters","queries","_getQueries","self","emit","then","content","results","catch","err","undefined","_originalResponse","e","findAnswers","derivedHelper","Promise","resolve","derivedState","getModifiedState","data","attributesForPrediction","nbHits","params","errorMessage","initIndex","Error","query","queryLanguages","searchForFacetValues","facet","maxFacetHits","userState","clientHasSFFV","clientHasInitIndex","isDisjunctive","isDisjunctiveFacet","algoliaQuery","getSearchForFacetQuery","searchForFacetValuesPromise","indexName","facetName","type","processResponse","response","addIsRefined","Array","isArray","facetHits","forEach","f","escapedValue","value","isRefined","isDisjunctiveFacetRefined","isFacetRefined","setQuery","q","_change","resetPage","isPageReset","clearRefinements","name","clearTags","addDisjunctiveFacetRefinement","addDisjunctiveRefine","apply","arguments","addHierarchicalFacetRefinement","addNumericRefinement","attribute","operator","addFacetRefinement","addRefine","addFacetExclusion","addExcludeRefinement","addExclude","addTag","tag","addTagRefinement","removeNumericRefinement","removeDisjunctiveFacetRefinement","removeDisjunctiveRefine","removeHierarchicalFacetRefinement","removeFacetRefinement","removeRefine","removeFacetExclusion","removeExcludeRefinement","removeExclude","removeTag","removeTagRefinement","toggleFacetExclusion","toggleExcludeFacetRefinement","toggleExclude","toggleRefinement","toggleFacetRefinement","toggleRefine","toggleTag","toggleTagRefinement","nextPage","page","setPage","previousPage","setCurrentPage","setIndex","setQueryParameter","parameter","setState","newState","overrideStateWithoutTriggeringChangeEvent","hasRefinements","getNumericRefinements","isConjunctiveFacet","isHierarchicalFacet","isHierarchicalFacetRefined","isExcluded","isExcludeRefined","isDisjunctiveRefined","hasTag","isTagRefined","hasTagRefinements","getIndex","getCurrentPage","getPage","getTags","tagRefinements","getRefinements","refinements","conjRefinements","getConjunctiveRefinements","r","push","excludeRefinements","getExcludeRefinements","disjRefinements","getDisjunctiveRefinements","numericRefinements","Object","keys","getNumericRefinement","getHierarchicalFacetBreadcrumb","states","mainQueries","queriesCount","length","helper","derivedQueries","map","derivedStateQueries","concat","queryId","_dispatchAlgoliaResponse","bind","_dispatchAlgoliaError","error","slice","s","specificResults","splice","formattedResponse","containsRefinement","facetFilters","numericFilters","tagFilters","_hasDisjunctiveRefinements","disjunctiveRefinements","event","clearCache","newClient","getClient","derive","fn","detachDerivedHelper","pos","indexOf","hasPendingRequests","module","exports"],"sources":["C:/Users/DELL/Desktop/cjv-movie/node_modules/algoliasearch-helper/src/algoliasearch.helper.js"],"sourcesContent":["'use strict';\n\nvar SearchParameters = require('./SearchParameters');\nvar SearchResults = require('./SearchResults');\nvar DerivedHelper = require('./DerivedHelper');\nvar requestBuilder = require('./requestBuilder');\n\nvar EventEmitter = require('@algolia/events');\nvar inherits = require('./functions/inherits');\nvar objectHasKeys = require('./functions/objectHasKeys');\nvar omit = require('./functions/omit');\nvar merge = require('./functions/merge');\n\nvar version = require('./version');\nvar escapeFacetValue = require('./functions/escapeFacetValue').escapeFacetValue;\n\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {object} event\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\n * @example\n * helper.on('change', function(event) {\n *   console.log('The parameters have changed');\n * });\n */\n\n/**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\n * @example\n * helper.on('search', function(event) {\n *   console.log('Search sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @property {string} event.facet the facet searched into\n * @property {string} event.query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(event) {\n *   console.log('searchForFacetValues sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @example\n * helper.on('searchOnce', function(event) {\n *   console.log('searchOnce sent');\n * });\n */\n\n/**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {object} event\n * @property {SearchResults} event.results the results received from Algolia\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(event) {\n *   console.log('Search results received');\n * });\n */\n\n/**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {object} event\n * @property {Error} event.error the error returned by the Algolia.\n * @example\n * helper.on('error', function(event) {\n *   console.log('Houston we got a problem.');\n * });\n */\n\n/**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */\n\n/**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n */\nfunction AlgoliaSearchHelper(client, index, options) {\n  if (typeof client.addAlgoliaAgent === 'function') {\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n\n  this.setClient(client);\n  var opts = options || {};\n  opts.index = index;\n  this.state = SearchParameters.make(opts);\n  this.lastResults = null;\n  this._queryId = 0;\n  this._lastQueryIdReceived = -1;\n  this.derivedHelpers = [];\n  this._currentNbQueries = 0;\n}\n\ninherits(AlgoliaSearchHelper, EventEmitter);\n\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper}\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.search = function() {\n  this._search({onlyWithDerivedHelpers: false});\n  return this;\n};\n\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function() {\n  this._search({onlyWithDerivedHelpers: true});\n  return this;\n};\n\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */\nAlgoliaSearchHelper.prototype.getQuery = function() {\n  var state = this.state;\n  return requestBuilder._getHitsSearchParams(state);\n};\n\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [callback] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */\nAlgoliaSearchHelper.prototype.searchOnce = function(options, cb) {\n  var tempState = !options ? this.state : this.state.setQueryParameters(options);\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\n  var self = this;\n\n  this._currentNbQueries++;\n\n  this.emit('searchOnce', {\n    state: tempState\n  });\n\n  if (cb) {\n    this.client\n      .search(queries)\n      .then(function(content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(null, new SearchResults(tempState, content.results), tempState);\n      })\n      .catch(function(err) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(err, null, tempState);\n      });\n\n    return undefined;\n  }\n\n  return this.client.search(queries).then(function(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    return {\n      content: new SearchResults(tempState, content.results),\n      state: tempState,\n      _originalResponse: content\n    };\n  }, function(e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n /**\n * Start the search for answers with the parameters set in the state.\n * This method returns a promise.\n * @param {Object} options - the options for answers API call\n * @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\n * @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\n * @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\n *\n * @return {promise} the answer results\n */\nAlgoliaSearchHelper.prototype.findAnswers = function(options) {\n  var state = this.state;\n  var derivedHelper = this.derivedHelpers[0];\n  if (!derivedHelper) {\n    return Promise.resolve([]);\n  }\n  var derivedState = derivedHelper.getModifiedState(state);\n  var data = merge(\n    {\n      attributesForPrediction: options.attributesForPrediction,\n      nbHits: options.nbHits\n    },\n    {\n      params: omit(requestBuilder._getHitsSearchParams(derivedState), [\n        'attributesToSnippet',\n        'hitsPerPage',\n        'restrictSearchableAttributes',\n        'snippetEllipsisText' // FIXME remove this line once the engine is fixed.\n      ])\n    }\n  );\n\n  var errorMessage = 'search for answers was called, but this client does not have a function client.initIndex(index).findAnswers';\n  if (typeof this.client.initIndex !== 'function') {\n    throw new Error(errorMessage);\n  }\n  var index = this.client.initIndex(derivedState.index);\n  if (typeof index.findAnswers !== 'function') {\n    throw new Error(errorMessage);\n  }\n  return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */\n\n/**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */\n\n/**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\nAlgoliaSearchHelper.prototype.searchForFacetValues = function(facet, query, maxFacetHits, userState) {\n  var clientHasSFFV = typeof this.client.searchForFacetValues === 'function';\n  var clientHasInitIndex = typeof this.client.initIndex === 'function';\n  if (\n    !clientHasSFFV &&\n    !clientHasInitIndex &&\n    typeof this.client.search !== 'function'\n  ) {\n    throw new Error(\n      'search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues'\n    );\n  }\n\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);\n\n  this._currentNbQueries++;\n  var self = this;\n  var searchForFacetValuesPromise;\n  // newer algoliasearch ^3.27.1 - ~4.0.0\n  if (clientHasSFFV) {\n    searchForFacetValuesPromise = this.client.searchForFacetValues([\n      {indexName: state.index, params: algoliaQuery}\n    ]);\n    // algoliasearch < 3.27.1\n  } else if (clientHasInitIndex) {\n    searchForFacetValuesPromise = this.client\n      .initIndex(state.index)\n      .searchForFacetValues(algoliaQuery);\n    // algoliasearch ~5.0.0\n  } else {\n    // @MAJOR only use client.search\n    delete algoliaQuery.facetName;\n    searchForFacetValuesPromise = this.client\n      .search([\n        {\n          type: 'facet',\n          facet: facet,\n          indexName: state.index,\n          params: algoliaQuery\n        }\n      ])\n      .then(function processResponse(response) {\n        return response.results[0];\n      });\n  }\n\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query\n  });\n\n  return searchForFacetValuesPromise.then(function addIsRefined(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n\n    content = Array.isArray(content) ? content[0] : content;\n\n    content.facetHits.forEach(function(f) {\n      f.escapedValue = escapeFacetValue(f.value);\n      f.isRefined = isDisjunctive\n        ? state.isDisjunctiveFacetRefined(facet, f.escapedValue)\n        : state.isFacetRefined(facet, f.escapedValue);\n    });\n\n    return content;\n  }, function(e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setQuery = function(q) {\n  this._change({\n    state: this.state.resetPage().setQuery(q),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */\nAlgoliaSearchHelper.prototype.clearRefinements = function(name) {\n  this._change({\n    state: this.state.resetPage().clearRefinements(name),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.clearTags = function() {\n  this._change({\n    state: this.state.resetPage().clearTags(),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function() {\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addHierarchicalFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addNumericRefinement = function(attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().addNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addRefine = function() {\n  return this.addFacetRefinement.apply(this, arguments);\n};\n\n\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.addExclude = function() {\n  return this.addFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().addTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function(attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().removeNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function() {\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function(facet) {\n  this._change({\n    state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeRefine = function() {\n  return this.removeFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.removeExclude = function() {\n  return this.removeFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().removeTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.toggleExclude = function() {\n  return this.toggleFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefinement = function(facet, value) {\n  return this.toggleFacetRefinement(facet, value);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefine = function() {\n  return this.toggleFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().toggleTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */\nAlgoliaSearchHelper.prototype.nextPage = function() {\n  var page = this.state.page || 0;\n  return this.setPage(page + 1);\n};\n\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper}\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */\nAlgoliaSearchHelper.prototype.previousPage = function() {\n  var page = this.state.page || 0;\n  return this.setPage(page - 1);\n};\n\n/**\n * @private\n */\nfunction setCurrentPage(page) {\n  if (page < 0) throw new Error('Page requested below 0.');\n\n  this._change({\n    state: this.state.setPage(page),\n    isPageReset: false\n  });\n\n  return this;\n}\n\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setIndex = function(name) {\n  this._change({\n    state: this.state.resetPage().setIndex(name),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */\nAlgoliaSearchHelper.prototype.setQueryParameter = function(parameter, value) {\n  this._change({\n    state: this.state.resetPage().setQueryParameter(parameter, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setState = function(newState) {\n  this._change({\n    state: SearchParameters.make(newState),\n    isPageReset: false\n  });\n\n  return this;\n};\n\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function(newState) {\n  this.state = new SearchParameters(newState);\n  return this;\n};\n\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */\nAlgoliaSearchHelper.prototype.hasRefinements = function(attribute) {\n  if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n    return true;\n  } else if (this.state.isConjunctiveFacet(attribute)) {\n    return this.state.isFacetRefined(attribute);\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\n    return this.state.isDisjunctiveFacetRefined(attribute);\n  } else if (this.state.isHierarchicalFacet(attribute)) {\n    return this.state.isHierarchicalFacetRefined(attribute);\n  }\n\n  // there's currently no way to know that the user did call `addNumericRefinement` at some point\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\n  // so we will return false in every other situations to be consistent\n  // while what we should do here is throw because we did not find the attribute in any type\n  // of refinement\n  return false;\n};\n\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */\nAlgoliaSearchHelper.prototype.isExcluded = function(facet, value) {\n  return this.state.isExcludeRefined(facet, value);\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function(facet, value) {\n  return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean}\n */\nAlgoliaSearchHelper.prototype.hasTag = function(tag) {\n  return this.state.isTagRefined(tag);\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */\nAlgoliaSearchHelper.prototype.isTagRefined = function() {\n  return this.hasTagRefinements.apply(this, arguments);\n};\n\n\n/**\n * Get the name of the currently used index.\n * @return {string}\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */\nAlgoliaSearchHelper.prototype.getIndex = function() {\n  return this.state.index;\n};\n\nfunction getCurrentPage() {\n  return this.state.page;\n}\n\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */\nAlgoliaSearchHelper.prototype.getTags = function() {\n  return this.state.tagRefinements;\n};\n\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */\nAlgoliaSearchHelper.prototype.getRefinements = function(facetName) {\n  var refinements = [];\n\n  if (this.state.isConjunctiveFacet(facetName)) {\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n\n    conjRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'conjunctive'\n      });\n    });\n\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\n\n    excludeRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'exclude'\n      });\n    });\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\n    var disjRefinements = this.state.getDisjunctiveRefinements(facetName);\n\n    disjRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'disjunctive'\n      });\n    });\n  }\n\n  var numericRefinements = this.state.getNumericRefinements(facetName);\n\n  Object.keys(numericRefinements).forEach(function(operator) {\n    var value = numericRefinements[operator];\n\n    refinements.push({\n      value: value,\n      operator: operator,\n      type: 'numeric'\n    });\n  });\n\n  return refinements;\n};\n\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */\nAlgoliaSearchHelper.prototype.getNumericRefinement = function(attribute, operator) {\n  return this.state.getNumericRefinement(attribute, operator);\n};\n\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function(facetName) {\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n\n// /////////// PRIVATE\n\n/**\n * Perform the underlying queries\n * @private\n * @return {undefined}\n * @fires search\n * @fires result\n * @fires error\n */\nAlgoliaSearchHelper.prototype._search = function(options) {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n\n  if (!options.onlyWithDerivedHelpers) {\n    mainQueries = requestBuilder._getQueries(state.index, state);\n\n    states.push({\n      state: state,\n      queriesCount: mainQueries.length,\n      helper: this\n    });\n\n    this.emit('search', {\n      state: state,\n      results: this.lastResults\n    });\n  }\n\n  var derivedQueries = this.derivedHelpers.map(function(derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var derivedStateQueries = requestBuilder._getQueries(derivedState.index, derivedState);\n\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper\n    });\n\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults\n    });\n\n    return derivedStateQueries;\n  });\n\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n  var queryId = this._queryId++;\n\n  this._currentNbQueries++;\n\n  try {\n    this.client.search(queries)\n      .then(this._dispatchAlgoliaResponse.bind(this, states, queryId))\n      .catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error\n    });\n  }\n};\n\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>}\n *  state state used for to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function(states, queryId, content) {\n  // FIXME remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= (queryId - this._lastQueryIdReceived);\n  this._lastQueryIdReceived = queryId;\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n\n  var results = content.results.slice();\n\n  states.forEach(function(s) {\n    var state = s.state;\n    var queriesCount = s.queriesCount;\n    var helper = s.helper;\n    var specificResults = results.splice(0, queriesCount);\n\n    var formattedResponse = helper.lastResults = new SearchResults(state, specificResults);\n\n    helper.emit('result', {\n      results: formattedResponse,\n      state: state\n    });\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function(queryId, error) {\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n\n  this.emit('error', {\n    error: error\n  });\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype.containsRefinement = function(query, facetFilters, numericFilters, tagFilters) {\n  return query ||\n    facetFilters.length !== 0 ||\n    numericFilters.length !== 0 ||\n    tagFilters.length !== 0;\n};\n\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean}\n */\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function(facet) {\n  return this.state.disjunctiveRefinements[facet] &&\n    this.state.disjunctiveRefinements[facet].length > 0;\n};\n\nAlgoliaSearchHelper.prototype._change = function(event) {\n  var state = event.state;\n  var isPageReset = event.isPageReset;\n\n  if (state !== this.state) {\n    this.state = state;\n\n    this.emit('change', {\n      state: this.state,\n      results: this.lastResults,\n      isPageReset: isPageReset\n    });\n  }\n};\n\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper}\n */\nAlgoliaSearchHelper.prototype.clearCache = function() {\n  this.client.clearCache && this.client.clearCache();\n  return this;\n};\n\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper}\n */\nAlgoliaSearchHelper.prototype.setClient = function(newClient) {\n  if (this.client === newClient) return this;\n\n  if (typeof newClient.addAlgoliaAgent === 'function') {\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n  this.client = newClient;\n\n  return this;\n};\n\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch}\n */\nAlgoliaSearchHelper.prototype.getClient = function() {\n  return this.client;\n};\n\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @return {DerivedHelper}\n */\nAlgoliaSearchHelper.prototype.derive = function(fn) {\n  var derivedHelper = new DerivedHelper(this, fn);\n  this.derivedHelpers.push(derivedHelper);\n  return derivedHelper;\n};\n\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @return {undefined}\n * @throws Error\n */\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function(derivedHelper) {\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\n  if (pos === -1) throw new Error('Derived helper already detached');\n  this.derivedHelpers.splice(pos, 1);\n};\n\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */\nAlgoliaSearchHelper.prototype.hasPendingRequests = function() {\n  return this._currentNbQueries > 0;\n};\n\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */\n\n/**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */\n\nmodule.exports = AlgoliaSearchHelper;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}