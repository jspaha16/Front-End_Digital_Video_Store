{"ast":null,"code":"'use strict';\n\nvar merge = require('./functions/merge');\n\nfunction sortObject(obj) {\n  return Object.keys(obj).sort(function (a, b) {\n    return a.localeCompare(b);\n  }).reduce(function (acc, curr) {\n    acc[curr] = obj[curr];\n    return acc;\n  }, {});\n}\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = []; // One query for the hits\n\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state)\n    }); // One for each disjunctive facets\n\n    state.getRefinedDisjunctiveFacets().forEach(function (refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)\n      });\n    }); // More to get the parent levels of the hierarchical facets when refined\n\n    state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet); // If we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get all parent values\n\n\n      if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {\n        // We generate a map of the filters we will use for our facet values queries\n        var filtersMap = currentRefinement[0].split(separator).slice(0, -1).reduce(function createFiltersMap(map, segment, level) {\n          return map.concat({\n            attribute: hierarchicalFacet.attributes[level],\n            value: level === 0 ? segment : [map[map.length - 1].value, segment].join(separator)\n          });\n        }, []);\n        filtersMap.forEach(function (filter, level) {\n          var params = requestBuilder._getDisjunctiveFacetSearchParams(state, filter.attribute, level === 0);\n\n          var parent = filtersMap[level - 1];\n          params.facetFilters = level > 0 ? [parent.attribute + ':' + parent.value] : undefined;\n          queries.push({\n            indexName: index,\n            params: params\n          });\n        });\n      }\n    });\n    return queries;\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @return {object.<string, any>}\n   */\n  _getHitsSearchParams: function (state) {\n    var facets = state.facets.concat(state.disjunctiveFacets).concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state));\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n\n    var numericFilters = requestBuilder._getNumericFilters(state);\n\n    var tagFilters = requestBuilder._getTagFilters(state);\n\n    var additionalParams = {\n      facets: facets.indexOf('*') > -1 ? ['*'] : facets,\n      tagFilters: tagFilters\n    };\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object}\n   */\n  _getDisjunctiveFacetSearchParams: function (state, facet, hierarchicalRootLevel) {\n    var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);\n\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n\n    var tagFilters = requestBuilder._getTagFilters(state);\n\n    var additionalParams = {\n      hitsPerPage: 0,\n      page: 0,\n      analytics: false,\n      clickAnalytics: false\n    };\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(state, hierarchicalFacet, hierarchicalRootLevel);\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function (state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n    Object.keys(state.numericRefinements).forEach(function (attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator] || [];\n\n        if (facetName !== attribute) {\n          values.forEach(function (value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function (v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending\n   * @private\n   * @return {string}\n   */\n  _getTagFilters: function (state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @return {array.<string>}\n   */\n  _getFacetFilters: function (state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements).forEach(function (facetName) {\n      var facetValues = facetsRefinements[facetName] || [];\n      facetValues.forEach(function (facetValue) {\n        facetFilters.push(facetName + ':' + facetValue);\n      });\n    });\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes).forEach(function (facetName) {\n      var facetValues = facetsExcludes[facetName] || [];\n      facetValues.forEach(function (facetValue) {\n        facetFilters.push(facetName + ':-' + facetValue);\n      });\n    });\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements).forEach(function (facetName) {\n      var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n\n      if (facetName === facet || !facetValues || facetValues.length === 0) {\n        return;\n      }\n\n      var orFilters = [];\n      facetValues.forEach(function (facetValue) {\n        orFilters.push(facetName + ':' + facetValue);\n      });\n      facetFilters.push(orFilters);\n    });\n    var hierarchicalFacetsRefinements = state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements).forEach(function (facetName) {\n      var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n      var facetValue = facetValues[0];\n\n      if (facetValue === undefined) {\n        return;\n      }\n\n      var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n\n      var attributeToRefine;\n      var attributesIndex; // we ask for parent facet values only when the `facet` is the current hierarchical facet\n\n      if (facet === facetName) {\n        // if we are at the root level already, no need to ask for facet values, we get them from\n        // the hits query\n        if (facetValue.indexOf(separator) === -1 || !rootPath && hierarchicalRootLevel === true || rootPath && rootPath.split(separator).length === facetValue.split(separator).length) {\n          return;\n        }\n\n        if (!rootPath) {\n          attributesIndex = facetValue.split(separator).length - 2;\n          facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n        } else {\n          attributesIndex = rootPath.split(separator).length - 1;\n          facetValue = rootPath;\n        }\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      } else {\n        attributesIndex = facetValue.split(separator).length - 1;\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      }\n\n      if (attributeToRefine) {\n        facetFilters.push([attributeToRefine + ':' + facetValue]);\n      }\n    });\n    return facetFilters;\n  },\n  _getHitsHierarchicalFacetsAttributes: function (state) {\n    var out = [];\n    return state.hierarchicalFacets.reduce( // ask for as much levels as there's hierarchical refinements\n    function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {\n      var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0]; // if no refinement, ask for root level\n\n      if (!hierarchicalRefinement) {\n        allAttributes.push(hierarchicalFacet.attributes[0]);\n        return allAttributes;\n      }\n\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      var level = hierarchicalRefinement.split(separator).length;\n      var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n      return allAttributes.concat(newAttributes);\n    }, out);\n  },\n  _getDisjunctiveHierarchicalFacetAttribute: function (state, hierarchicalFacet, rootLevel) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || ''; // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n  getSearchForFacetQuery: function (facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ? state.clearRefinements(facetName) : state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName\n    };\n\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n\n    return sortObject(merge({}, requestBuilder._getHitsSearchParams(stateForSearchForFacetValues), searchForFacetSearchParameters));\n  }\n};\nmodule.exports = requestBuilder;","map":{"version":3,"names":["merge","require","sortObject","obj","Object","keys","sort","a","b","localeCompare","reduce","acc","curr","requestBuilder","_getQueries","getQueries","index","state","queries","push","indexName","params","_getHitsSearchParams","getRefinedDisjunctiveFacets","forEach","refinedFacet","_getDisjunctiveFacetSearchParams","getRefinedHierarchicalFacets","hierarchicalFacet","getHierarchicalFacetByName","currentRefinement","getHierarchicalRefinement","separator","_getHierarchicalFacetSeparator","length","split","filtersMap","slice","createFiltersMap","map","segment","level","concat","attribute","attributes","value","join","filter","parent","facetFilters","undefined","facets","disjunctiveFacets","_getHitsHierarchicalFacetsAttributes","_getFacetFilters","numericFilters","_getNumericFilters","tagFilters","_getTagFilters","additionalParams","indexOf","getQueryParams","facet","hierarchicalRootLevel","hitsPerPage","page","analytics","clickAnalytics","_getDisjunctiveHierarchicalFacetAttribute","facetName","numericRefinements","operators","operator","values","Array","isArray","vs","v","tagRefinements","facetsRefinements","facetValues","facetValue","facetsExcludes","disjunctiveFacetsRefinements","orFilters","hierarchicalFacetsRefinements","rootPath","_getHierarchicalRootPath","attributeToRefine","attributesIndex","lastIndexOf","out","hierarchicalFacets","getHitsAttributesForHierarchicalFacet","allAttributes","hierarchicalRefinement","name","newAttributes","rootLevel","attributeIndex","parentLevel","getSearchForFacetQuery","query","maxFacetHits","stateForSearchForFacetValues","isDisjunctiveFacet","clearRefinements","searchForFacetSearchParameters","facetQuery","module","exports"],"sources":["C:/Users/DELL/Desktop/cjv-movie/node_modules/algoliasearch-helper/src/requestBuilder.js"],"sourcesContent":["'use strict';\n\nvar merge = require('./functions/merge');\n\nfunction sortObject(obj) {\n  return Object.keys(obj)\n    .sort(function(a, b) {\n      return a.localeCompare(b);\n    })\n    .reduce(function(acc, curr) {\n      acc[curr] = obj[curr];\n      return acc;\n    }, {});\n}\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state)\n    });\n\n    // One for each disjunctive facets\n    state.getRefinedDisjunctiveFacets().forEach(function(refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)\n      });\n    });\n\n    // More to get the parent levels of the hierarchical facets when refined\n    state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      // If we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get all parent values\n      if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {\n        // We generate a map of the filters we will use for our facet values queries\n        var filtersMap = currentRefinement[0].split(separator).slice(0, -1).reduce(\n          function createFiltersMap(map, segment, level) {\n            return map.concat({\n              attribute: hierarchicalFacet.attributes[level],\n              value: level === 0\n                ? segment\n                : [map[map.length - 1].value, segment].join(separator)\n            });\n          }\n        , []);\n\n        filtersMap.forEach(function(filter, level) {\n          var params = requestBuilder._getDisjunctiveFacetSearchParams(\n            state,\n            filter.attribute,\n            level === 0\n          );\n\n          var parent = filtersMap[level - 1];\n          params.facetFilters = level > 0 ? [parent.attribute + ':' + parent.value] : undefined;\n\n          queries.push({indexName: index, params: params});\n        });\n      }\n    });\n\n    return queries;\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @return {object.<string, any>}\n   */\n  _getHitsSearchParams: function(state) {\n    var facets = state.facets\n      .concat(state.disjunctiveFacets)\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state));\n\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      facets: facets.indexOf('*') > -1 ? ['*'] : facets,\n      tagFilters: tagFilters\n    };\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object}\n   */\n  _getDisjunctiveFacetSearchParams: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 0,\n      page: 0,\n      analytics: false,\n      clickAnalytics: false\n    };\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(\n        state,\n        hierarchicalFacet,\n        hierarchicalRootLevel\n      );\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function(state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n\n    Object.keys(state.numericRefinements).forEach(function(attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function(operator) {\n        var values = operators[operator] || [];\n        if (facetName !== attribute) {\n          values.forEach(function(value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function(v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending\n   * @private\n   * @return {string}\n   */\n  _getTagFilters: function(state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @return {array.<string>}\n   */\n  _getFacetFilters: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements).forEach(function(facetName) {\n      var facetValues = facetsRefinements[facetName] || [];\n      facetValues.forEach(function(facetValue) {\n        facetFilters.push(facetName + ':' + facetValue);\n      });\n    });\n\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes).forEach(function(facetName) {\n      var facetValues = facetsExcludes[facetName] || [];\n      facetValues.forEach(function(facetValue) {\n        facetFilters.push(facetName + ':-' + facetValue);\n      });\n    });\n\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements).forEach(function(facetName) {\n      var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n      if (facetName === facet || !facetValues || facetValues.length === 0) {\n        return;\n      }\n      var orFilters = [];\n\n      facetValues.forEach(function(facetValue) {\n        orFilters.push(facetName + ':' + facetValue);\n      });\n\n      facetFilters.push(orFilters);\n    });\n\n    var hierarchicalFacetsRefinements = state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements).forEach(function(facetName) {\n      var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n      var facetValue = facetValues[0];\n\n      if (facetValue === undefined) {\n        return;\n      }\n\n      var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeToRefine;\n      var attributesIndex;\n\n      // we ask for parent facet values only when the `facet` is the current hierarchical facet\n      if (facet === facetName) {\n        // if we are at the root level already, no need to ask for facet values, we get them from\n        // the hits query\n        if (facetValue.indexOf(separator) === -1 || (!rootPath && hierarchicalRootLevel === true) ||\n          (rootPath && rootPath.split(separator).length === facetValue.split(separator).length)) {\n          return;\n        }\n\n        if (!rootPath) {\n          attributesIndex = facetValue.split(separator).length - 2;\n          facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n        } else {\n          attributesIndex = rootPath.split(separator).length - 1;\n          facetValue = rootPath;\n        }\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      } else {\n        attributesIndex = facetValue.split(separator).length - 1;\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      }\n\n      if (attributeToRefine) {\n        facetFilters.push([attributeToRefine + ':' + facetValue]);\n      }\n    });\n\n    return facetFilters;\n  },\n\n  _getHitsHierarchicalFacetsAttributes: function(state) {\n    var out = [];\n\n    return state.hierarchicalFacets.reduce(\n      // ask for as much levels as there's hierarchical refinements\n      function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {\n        var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0];\n\n        // if no refinement, ask for root level\n        if (!hierarchicalRefinement) {\n          allAttributes.push(hierarchicalFacet.attributes[0]);\n          return allAttributes;\n        }\n\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var level = hierarchicalRefinement.split(separator).length;\n        var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n\n        return allAttributes.concat(newAttributes);\n      }, out);\n  },\n\n  _getDisjunctiveHierarchicalFacetAttribute: function(state, hierarchicalFacet, rootLevel) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n\n  getSearchForFacetQuery: function(facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ?\n      state.clearRefinements(facetName) :\n      state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    return sortObject(merge(\n      {},\n      requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),\n      searchForFacetSearchParameters\n    ));\n  }\n};\n\nmodule.exports = requestBuilder;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}